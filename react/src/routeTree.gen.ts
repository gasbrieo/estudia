/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexImport } from './routes/_protected/index'
import { Route as PublicLoginIndexImport } from './routes/_public/login/index'
import { Route as ProtectedUserUsernameIndexImport } from './routes/_protected/user/$username/index'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const PublicLoginIndexRoute = PublicLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => PublicRoute,
} as any)

const ProtectedUserUsernameIndexRoute = ProtectedUserUsernameIndexImport.update(
  {
    id: '/user/$username/',
    path: '/user/$username/',
    getParentRoute: () => ProtectedRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/login/': {
      id: '/_public/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginIndexImport
      parentRoute: typeof PublicImport
    }
    '/_protected/user/$username/': {
      id: '/_protected/user/$username/'
      path: '/user/$username'
      fullPath: '/user/$username'
      preLoaderRoute: typeof ProtectedUserUsernameIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedUserUsernameIndexRoute: typeof ProtectedUserUsernameIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedUserUsernameIndexRoute: ProtectedUserUsernameIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicLoginIndexRoute: typeof PublicLoginIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginIndexRoute: PublicLoginIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/login': typeof PublicLoginIndexRoute
  '/user/$username': typeof ProtectedUserUsernameIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/login': typeof PublicLoginIndexRoute
  '/user/$username': typeof ProtectedUserUsernameIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/': typeof ProtectedIndexRoute
  '/_public/login/': typeof PublicLoginIndexRoute
  '/_protected/user/$username/': typeof ProtectedUserUsernameIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/login' | '/user/$username'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/login' | '/user/$username'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_protected/'
    | '/_public/login/'
    | '/_protected/user/$username/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_public"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/",
        "/_protected/user/$username/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/login/"
      ]
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    },
    "/_public/login/": {
      "filePath": "_public/login/index.tsx",
      "parent": "/_public"
    },
    "/_protected/user/$username/": {
      "filePath": "_protected/user/$username/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
